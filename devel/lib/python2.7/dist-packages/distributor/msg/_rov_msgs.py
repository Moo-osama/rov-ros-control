# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from distributor/rov_msgs.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rov_msgs(genpy.Message):
  _md5sum = "580798bc75b1af001886c0456174d658"
  _type = "distributor/rov_msgs"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 pitch
float64 roll
float64 yaw
float64 acc_x
float64 acc_y
float64 acc_z
float64 gyro_x
float64 gyro_y
float64 gyro_z
float64 paro
float64 PH
float64 water
float64 temp
float64 mag1
float64 mag2
float64 mag3"""
  __slots__ = ['pitch','roll','yaw','acc_x','acc_y','acc_z','gyro_x','gyro_y','gyro_z','paro','PH','water','temp','mag1','mag2','mag3']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pitch,roll,yaw,acc_x,acc_y,acc_z,gyro_x,gyro_y,gyro_z,paro,PH,water,temp,mag1,mag2,mag3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rov_msgs, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.gyro_x is None:
        self.gyro_x = 0.
      if self.gyro_y is None:
        self.gyro_y = 0.
      if self.gyro_z is None:
        self.gyro_z = 0.
      if self.paro is None:
        self.paro = 0.
      if self.PH is None:
        self.PH = 0.
      if self.water is None:
        self.water = 0.
      if self.temp is None:
        self.temp = 0.
      if self.mag1 is None:
        self.mag1 = 0.
      if self.mag2 is None:
        self.mag2 = 0.
      if self.mag3 is None:
        self.mag3 = 0.
    else:
      self.pitch = 0.
      self.roll = 0.
      self.yaw = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.gyro_x = 0.
      self.gyro_y = 0.
      self.gyro_z = 0.
      self.paro = 0.
      self.PH = 0.
      self.water = 0.
      self.temp = 0.
      self.mag1 = 0.
      self.mag2 = 0.
      self.mag3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.pitch, _x.roll, _x.yaw, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.paro, _x.PH, _x.water, _x.temp, _x.mag1, _x.mag2, _x.mag3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.pitch, _x.roll, _x.yaw, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.paro, _x.PH, _x.water, _x.temp, _x.mag1, _x.mag2, _x.mag3,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.pitch, _x.roll, _x.yaw, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.paro, _x.PH, _x.water, _x.temp, _x.mag1, _x.mag2, _x.mag3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.pitch, _x.roll, _x.yaw, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.paro, _x.PH, _x.water, _x.temp, _x.mag1, _x.mag2, _x.mag3,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
