# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from GUI/motors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motors(genpy.Message):
  _md5sum = "217166abeed0122de3610215eeb90349"
  _type = "GUI/motors"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 motorA
int64 motorB
int64 motorC
int64 motorD
int64 motorE
int64 motorF
bool PH_button
bool TEMP_button
bool MAG_button
bool WATER_button
"""
  __slots__ = ['motorA','motorB','motorC','motorD','motorE','motorF','PH_button','TEMP_button','MAG_button','WATER_button']
  _slot_types = ['int64','int64','int64','int64','int64','int64','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motorA,motorB,motorC,motorD,motorE,motorF,PH_button,TEMP_button,MAG_button,WATER_button

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motorA is None:
        self.motorA = 0
      if self.motorB is None:
        self.motorB = 0
      if self.motorC is None:
        self.motorC = 0
      if self.motorD is None:
        self.motorD = 0
      if self.motorE is None:
        self.motorE = 0
      if self.motorF is None:
        self.motorF = 0
      if self.PH_button is None:
        self.PH_button = False
      if self.TEMP_button is None:
        self.TEMP_button = False
      if self.MAG_button is None:
        self.MAG_button = False
      if self.WATER_button is None:
        self.WATER_button = False
    else:
      self.motorA = 0
      self.motorB = 0
      self.motorC = 0
      self.motorD = 0
      self.motorE = 0
      self.motorF = 0
      self.PH_button = False
      self.TEMP_button = False
      self.MAG_button = False
      self.WATER_button = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6q4B().pack(_x.motorA, _x.motorB, _x.motorC, _x.motorD, _x.motorE, _x.motorF, _x.PH_button, _x.TEMP_button, _x.MAG_button, _x.WATER_button))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.motorA, _x.motorB, _x.motorC, _x.motorD, _x.motorE, _x.motorF, _x.PH_button, _x.TEMP_button, _x.MAG_button, _x.WATER_button,) = _get_struct_6q4B().unpack(str[start:end])
      self.PH_button = bool(self.PH_button)
      self.TEMP_button = bool(self.TEMP_button)
      self.MAG_button = bool(self.MAG_button)
      self.WATER_button = bool(self.WATER_button)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6q4B().pack(_x.motorA, _x.motorB, _x.motorC, _x.motorD, _x.motorE, _x.motorF, _x.PH_button, _x.TEMP_button, _x.MAG_button, _x.WATER_button))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.motorA, _x.motorB, _x.motorC, _x.motorD, _x.motorE, _x.motorF, _x.PH_button, _x.TEMP_button, _x.MAG_button, _x.WATER_button,) = _get_struct_6q4B().unpack(str[start:end])
      self.PH_button = bool(self.PH_button)
      self.TEMP_button = bool(self.TEMP_button)
      self.MAG_button = bool(self.MAG_button)
      self.WATER_button = bool(self.WATER_button)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6q4B = None
def _get_struct_6q4B():
    global _struct_6q4B
    if _struct_6q4B is None:
        _struct_6q4B = struct.Struct("<6q4B")
    return _struct_6q4B
