// Generated by gencpp from file distributor/rov_msgs.msg
// DO NOT EDIT!


#ifndef DISTRIBUTOR_MESSAGE_ROV_MSGS_H
#define DISTRIBUTOR_MESSAGE_ROV_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace distributor
{
template <class ContainerAllocator>
struct rov_msgs_
{
  typedef rov_msgs_<ContainerAllocator> Type;

  rov_msgs_()
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , paro(0.0)
    , PH(0.0)
    , water(0.0)
    , temp(0.0)
    , mag1(0.0)
    , mag2(0.0)
    , mag3(0.0)  {
    }
  rov_msgs_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , paro(0.0)
    , PH(0.0)
    , water(0.0)
    , temp(0.0)
    , mag1(0.0)
    , mag2(0.0)
    , mag3(0.0)  {
  (void)_alloc;
    }



   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _acc_x_type;
  _acc_x_type acc_x;

   typedef double _acc_y_type;
  _acc_y_type acc_y;

   typedef double _acc_z_type;
  _acc_z_type acc_z;

   typedef double _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef double _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef double _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef double _paro_type;
  _paro_type paro;

   typedef double _PH_type;
  _PH_type PH;

   typedef double _water_type;
  _water_type water;

   typedef double _temp_type;
  _temp_type temp;

   typedef double _mag1_type;
  _mag1_type mag1;

   typedef double _mag2_type;
  _mag2_type mag2;

   typedef double _mag3_type;
  _mag3_type mag3;





  typedef boost::shared_ptr< ::distributor::rov_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::distributor::rov_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct rov_msgs_

typedef ::distributor::rov_msgs_<std::allocator<void> > rov_msgs;

typedef boost::shared_ptr< ::distributor::rov_msgs > rov_msgsPtr;
typedef boost::shared_ptr< ::distributor::rov_msgs const> rov_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::distributor::rov_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::distributor::rov_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace distributor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'distributor': ['/home/mahfouz/fuckin_ws/src/distributor/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::distributor::rov_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::distributor::rov_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::distributor::rov_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::distributor::rov_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::distributor::rov_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::distributor::rov_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::distributor::rov_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "580798bc75b1af001886c0456174d658";
  }

  static const char* value(const ::distributor::rov_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x580798bc75b1af00ULL;
  static const uint64_t static_value2 = 0x1886c0456174d658ULL;
};

template<class ContainerAllocator>
struct DataType< ::distributor::rov_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "distributor/rov_msgs";
  }

  static const char* value(const ::distributor::rov_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::distributor::rov_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pitch\n\
float64 roll\n\
float64 yaw\n\
float64 acc_x\n\
float64 acc_y\n\
float64 acc_z\n\
float64 gyro_x\n\
float64 gyro_y\n\
float64 gyro_z\n\
float64 paro\n\
float64 PH\n\
float64 water\n\
float64 temp\n\
float64 mag1\n\
float64 mag2\n\
float64 mag3\n\
";
  }

  static const char* value(const ::distributor::rov_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::distributor::rov_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.paro);
      stream.next(m.PH);
      stream.next(m.water);
      stream.next(m.temp);
      stream.next(m.mag1);
      stream.next(m.mag2);
      stream.next(m.mag3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rov_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::distributor::rov_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::distributor::rov_msgs_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.acc_z);
    s << indent << "gyro_x: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "paro: ";
    Printer<double>::stream(s, indent + "  ", v.paro);
    s << indent << "PH: ";
    Printer<double>::stream(s, indent + "  ", v.PH);
    s << indent << "water: ";
    Printer<double>::stream(s, indent + "  ", v.water);
    s << indent << "temp: ";
    Printer<double>::stream(s, indent + "  ", v.temp);
    s << indent << "mag1: ";
    Printer<double>::stream(s, indent + "  ", v.mag1);
    s << indent << "mag2: ";
    Printer<double>::stream(s, indent + "  ", v.mag2);
    s << indent << "mag3: ";
    Printer<double>::stream(s, indent + "  ", v.mag3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DISTRIBUTOR_MESSAGE_ROV_MSGS_H
