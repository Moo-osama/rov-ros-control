// Generated by gencpp from file GUI/cannonNumbers.msg
// DO NOT EDIT!


#ifndef GUI_MESSAGE_CANNONNUMBERS_H
#define GUI_MESSAGE_CANNONNUMBERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace GUI
{
template <class ContainerAllocator>
struct cannonNumbers_
{
  typedef cannonNumbers_<ContainerAllocator> Type;

  cannonNumbers_()
    : r1(0.0)
    , r2(0.0)
    , r3(0.0)
    , l(0.0)
    , vol(0.0)
    , weight(0.0)  {
    }
  cannonNumbers_(const ContainerAllocator& _alloc)
    : r1(0.0)
    , r2(0.0)
    , r3(0.0)
    , l(0.0)
    , vol(0.0)
    , weight(0.0)  {
  (void)_alloc;
    }



   typedef double _r1_type;
  _r1_type r1;

   typedef double _r2_type;
  _r2_type r2;

   typedef double _r3_type;
  _r3_type r3;

   typedef double _l_type;
  _l_type l;

   typedef double _vol_type;
  _vol_type vol;

   typedef double _weight_type;
  _weight_type weight;





  typedef boost::shared_ptr< ::GUI::cannonNumbers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::GUI::cannonNumbers_<ContainerAllocator> const> ConstPtr;

}; // struct cannonNumbers_

typedef ::GUI::cannonNumbers_<std::allocator<void> > cannonNumbers;

typedef boost::shared_ptr< ::GUI::cannonNumbers > cannonNumbersPtr;
typedef boost::shared_ptr< ::GUI::cannonNumbers const> cannonNumbersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::GUI::cannonNumbers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::GUI::cannonNumbers_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace GUI

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'GUI': ['/home/mahfouz/fuckin_ws/src/GUI/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::GUI::cannonNumbers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::GUI::cannonNumbers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::GUI::cannonNumbers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::GUI::cannonNumbers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::GUI::cannonNumbers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::GUI::cannonNumbers_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::GUI::cannonNumbers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b96d3a629a34dfd2040e80b4afc99711";
  }

  static const char* value(const ::GUI::cannonNumbers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb96d3a629a34dfd2ULL;
  static const uint64_t static_value2 = 0x040e80b4afc99711ULL;
};

template<class ContainerAllocator>
struct DataType< ::GUI::cannonNumbers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GUI/cannonNumbers";
  }

  static const char* value(const ::GUI::cannonNumbers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::GUI::cannonNumbers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 r1\n\
float64 r2\n\
float64 r3\n\
float64 l\n\
float64 vol\n\
float64 weight\n\
";
  }

  static const char* value(const ::GUI::cannonNumbers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::GUI::cannonNumbers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r1);
      stream.next(m.r2);
      stream.next(m.r3);
      stream.next(m.l);
      stream.next(m.vol);
      stream.next(m.weight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cannonNumbers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::GUI::cannonNumbers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::GUI::cannonNumbers_<ContainerAllocator>& v)
  {
    s << indent << "r1: ";
    Printer<double>::stream(s, indent + "  ", v.r1);
    s << indent << "r2: ";
    Printer<double>::stream(s, indent + "  ", v.r2);
    s << indent << "r3: ";
    Printer<double>::stream(s, indent + "  ", v.r3);
    s << indent << "l: ";
    Printer<double>::stream(s, indent + "  ", v.l);
    s << indent << "vol: ";
    Printer<double>::stream(s, indent + "  ", v.vol);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GUI_MESSAGE_CANNONNUMBERS_H
